@model UoAssessmentModel

<div class="border border-gray-200 rounded-md pt-3 px-3 mb-4">
    <h3 class="text-base leading-5 font-medium text-gray-900 pb-2">@Model.Position. @Model.Name</h3>
    <div class="mt-1 grid grid-cols-1 col-gap-4 row-gap-4 sm:grid-cols-2">
        <dl class="sm:col-span-1 pb-3">
            <dt class="text-sm leading-5 font-medium text-gray-500">
                Type
            </dt>
            <dd class="mt-1 text-sm leading-5 text-gray-900">
                @Model.AssessmentType.Name
            </dd>
        </dl>
        <dl class="sm:col-span-1 pb-3">
            <dt class="text-sm leading-5 font-medium text-gray-500">
                Weighting
            </dt>
            <dd class="mt-1 text-sm leading-5 text-gray-900">
                @Model.GetWeightOrFormative()
            </dd>
        </dl>
        @if (Model.Purpose != null)
        {
            <dl class="sm:col-span-2@(Model.Description != null ? " pb-3" : "")">
                <dt class="text-sm leading-5 font-medium text-gray-500">
                    Purpose
                </dt>
                <dd class="mt-1 text-sm leading-5 text-gray-900">
                    @Model.Purpose
                </dd>
            </dl>
        }
        @if (Model.Description != null)
        {
            <dl class="sm:col-span-2">
                <dt class="text-sm leading-5 font-medium text-gray-500">
                    Description
                </dt>
                <dd class="mt-1 text-sm leading-5 text-gray-900">
                    @Model.Description
                </dd>
            </dl>
        }
    </div>
    @if (Model.LearningOutcomes.Count > 0)
    {
        <details class="outcomes block @(Model.Documents.Count > 0 ? "pt-3" : "py-3")">
            <summary class="ie:hidden edge:hidden inline select-none underline font-medium text-sm text-indigo-600 hover:text-indigo-900 cursor-pointer"><span>Show learning outcomes</span></summary>
            <dl class="sm:col-span-2">
                <dt class="hidden ie:block edge:block text-sm leading-5 font-medium text-gray-500">
                    Course learning outcomes
                </dt>
                <dd class="block">
                    <p class="mt-1 text-sm text-gray-500 ie:hidden edge:hidden">This assessment item is mapped to the following course learning outcomes:</p>
                    <ol class="mt-1 ml-4 text-sm leading-5 text-gray-900">
                        @foreach (var learningOutcome in Model.LearningOutcomes.OrderBy(lo => lo.Position))
                        {
                            <li><span class="inline-block w-6 text-gray-500">@learningOutcome.Position.</span>@learningOutcome.Name</li>
                        }
                    </ol>
                </dd>
            </dl>
        </details>
    }
    @if (Model.Documents.Count > 0)
    {
        ViewData["DocumentTypes"] = new List<UoDocumentType>()
        {
            UoDocumentType.AssessmentItem,
            UoDocumentType.MarkingRubric
        };
        <details class="documents block py-3">
            <summary class="ie:hidden edge:hidden inline select-none underline font-medium text-sm text-indigo-600 hover:text-indigo-900 cursor-pointer"><span>Show documents</span></summary>
            <dl class="sm:col-span-2 pt-2">
                <dt class="hidden ie:block edge:block text-sm leading-5 font-medium text-gray-500">
                    Documents
                </dt>
                <dd class="block">
                    <partial name="_Documents" model="Model.Documents" view-data="ViewData" />
                </dd>
            </dl>
        </details>
    }
    @if (Model.NodeAssessments.Count > 0 || Model.LevelAssessments.Count > 0)
    {
        <div class="pb-3">
            <h2 class="text-sm leading-5 font-medium text-gray-500">Mapping</h2>
            <div class="mt-1">
                @{ViewData["IncludeNodeLink"] = true;}
                @if (Model.NodeAssessments.Count > 0)
                {
                    try
                    {
                        <partial name="Templates/@ViewData["Template"]/_AssessmentNodes" model="Model.Nodes" />
                    }
                    catch (InvalidOperationException)
                    {
                        <partial name="Templates/Universal/_AssessmentNodes" model="Model.Nodes" />
                    }
                }
                @if (Model.LevelAssessments.Count > 0)
                {
                    <div class="@(Model.NodeAssessments.Count > 0 ? "mt-4" : "")">
                        @try
                        {
                            <partial name="Templates/@ViewData["Template"]/_AssessmentNodeLevels" model="Model.NodeLevels" />
                        }
                        catch (InvalidOperationException)
                        {
                            <partial name="Templates/Universal/_AssessmentNodeLevels" model="Model.NodeLevels" />
                        }
                    </div>
                }
            </div>
        </div>
    }
</div>
