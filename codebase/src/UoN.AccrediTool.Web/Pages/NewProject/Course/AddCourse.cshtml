@page
@model UoN.AccrediTool.Web.Pages.NewProject.Course.AddCourseModel
@{
}
@Html.AntiForgeryToken()

<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
<script>

    var numOfCourseMappings = 0;
    var assesmentCount = 0;
    var assessmentExampleCount = 0;
    var learningOutcomeCount = 0;

    function formValidation()
    {
        let form = document.AddCourseForm;

        let isValid = true;

        let textInvalidClass = "rounded-lg border-solid border-2 border-red-500 focus:border-red-500";
        let textValidClass= "rounded-lg border-solid border-2 border-black-500 focus:border-blue-300";

        isValid = validateText("CourseModel_Name", isValid, textValidClass, textInvalidClass);
        isValid = validateText("CourseCode", isValid, textValidClass, textInvalidClass);
        isValid = validateText("CourseModel_Description", isValid, "rounded-lg border-solid border-2 border-black-500 focus:border-blue-300 col-span-full h-56", "rounded-lg border-solid border-2 border-red-500 focus:border-red-500 col-span-full h-56");

        isValid = validateInteger("CourseModel_Units", isValid, textValidClass, textInvalidClass);

        isValid = validateText("CourseModel_AcademicOrgId", isValid, "", "border border-red-500");
        isValid = validateText("CourseModel_FieldOfEducationId", isValid, "", "border border-red-500");

        if(!(/[a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z]\d\d\d\d/.test(document.getElementById("CourseCode").value)))
        {
            isValid = false;

            document.getElementById("CourseCode").className = textInvalidClass;
        }
        else
        {
           document.getElementById("CourseCode").className = textValidClass; 
        }


        if (numOfCourseMappings == 0) 
        {

            document.getElementById("Mapping_Header").className = "justify-start col-span-6";


            for(let i = 0; i < numOfCourseMappings; i++)
            {
                if(document.getElementById("courseMappings[" + i + "].NodeId").value != -2)
                {
                    if(document.getElementById("courseMappings[" + i + "].NodeId").value == -1)
                    {
                        isValid = false;
                        document.getElementById("courseMappings[" + i + "].NodeId").className = "w-12 float-left mr-3 border border-red-500";
                    }
                    else
                    {
                        document.getElementById("courseMappings[" + i + "].NodeId").className = "w-12 float-left mr-3";
                    }

                    if(document.getElementById("courseMappings[" + i + "].Level").value > 4 || document.getElementById("courseMappings[" + i + "].Level").value < 1)
                    {
                        isValid = false;
                        document.getElementById("courseMappings[" + i + "].Level").className = "w-full h-full text-4xl text-center border border-red-500";
                    }
                    else
                    {
                        document.getElementById("courseMappings[" + i + "].Level").className = "w-full h-full text-4xl text-center";
                    }


                    if(document.getElementById("courseMappings[" + i + "].Taught").value == "true" || document.getElementById("courseMappings[" + i + "].Practiced").value == "true" || document.getElementById("courseMappings[" + i + "].Assessed").value == "true")
                    {
                        document.getElementById("InvalidMapping").className = "hidden";
                    }
                    else
                    {
                        isValid = false;
                        document.getElementById("Mapping_Header").className = "justify-start col-span-1";
                        document.getElementById("InvalidMapping").className = "text-red-500 justify-start col-span-5";
                    }

                    }

     
            }


        }

        //validate assessments
        for(let i = 0; i < assesmentCount; i++)
        {
            isValid = validateText("assessmentModels[" + i + "].Name", isValid, "w-full h-full", "w-full h-full border border-red-500");
            isValid = validateInteger("assessmentModels[" + i + "].Weight", isValid, "w-full h-full", "w-full h-full border border-red-500");
        }

        //validate assessment example
        for(let i = 0; i < assessmentExampleCount; i++)
        {
            isValid = validateText("documents[" + i + "].Name",isValid , "border-l border-b col-span-3", "border-l border-b col-span-3 border border-red-500");

            const urlREGEX = /https?:\/\/(www\.)?[-a-zA-Z0-9@@:%._\+~#=]{1,256}\.[a-zA-Z0-9()]{1,6}\b([-a-zA-Z0-9()!@@:%_\+.~#?&\/\/=]*)/;

            if(urlREGEX.test(document.getElementById("documents[" + i +"].URI").value))
            {
                document.getElementById("documents[" + i + "].URI").className = "border-l border-b col-span-4";
            }
            else
            {
                isValid= false
                document.getElementById("documents[" + i + "].URI").className = "border-l border-b col-span-4 border border-red-500";
            }

        }

        if(isValid)
        {
            form.submit()
        }
    }

    function validateInteger(id, isValid, validClass, invalidClass)
    {
        const numbersOnly =  /^[0-9]*$/;

        isValid = validateText(id, isValid, validClass, invalidClass);

        if(!numbersOnly.test(document.getElementById(id).value))
        {
            isValid = false;

            document.getElementById(id).className = invalidClass
        }


        return isValid;

    }

    function validateText(id, isValid, validClass, invalidClass)
    {
        if(document.getElementById(id).value == "")
        {
            isValid = false;

            document.getElementById(id).className = invalidClass
        }
        else
        {
            document.getElementById(id).className = validClass
        }

        return isValid;
    }

    function IncrementCourseMappings()
    { 
        numOfCourseMappings++;
    }

    function getURL()
    {
         return window.location.href
    }

    function insertResponse(response, id)
    {
        document.getElementById(id).insertAdjacentHTML("beforeend", response);
    }

    function toggleTaught(index)
    {

        taughtElement = document.getElementById("courseMappings[" + index + "].Taught");

        taughtCircleCross = document.getElementById("Taught_CircleCross_" + index);
        taughtCheckmark = document.getElementById("Taught_Checkmark_" + index);

        if(taughtElement.value == "true")
        {
            taughtElement.value = "false";

            taughtCheckmark.className = "hidden text-gray-500";
            taughtCircleCross.className = "";
        }
        else
        {
            taughtElement.value = "true";

            taughtCheckmark.className = "text-gray-500";
            taughtCircleCross.className = "hidden";
        }
   

    }

    function togglePracticed(index)
    {
        PracticedElement = document.getElementById("courseMappings[" + index + "].Practiced");

        practicedCircleCross = document.getElementById("Practiced_CircleCross_" + index);
        practicedCheckmark = document.getElementById("Practiced_Checkmark_" + index);

        if(PracticedElement.value == "true")
        {
            PracticedElement.value = "false";

            practicedCheckmark.className = "hidden text-gray-500";
            practicedCircleCross.className = "";
        }
        else
        {
            PracticedElement.value = "true";

            practicedCheckmark.className = "text-gray-500";
            practicedCircleCross.className = "hidden";
        }
    }


    function toggleAssessed(index)
    {
        assessedElement = document.getElementById("courseMappings[" + index + "].Assessed");

        assessedCircleCross = document.getElementById("Assessed_CircleCross_" + index);
        assessedCheckmark = document.getElementById("Assessed_Checkmark_" + index);

        if(assessedElement.value == "true")
        {
            assessedElement.value = "false";

            assessedCheckmark.className = "hidden text-gray-500";
            assessedCircleCross.className = "";
        }
        else
        {
            assessedElement.value = "true";

            assessedCheckmark.className = "text-gray-500";
            assessedCircleCross.className = "hidden";
        }
    }

    function insertNodeResponse(response, index)
    {
        nodeDescription = document.getElementById("Node_Description_" + index);

        nodeDescription.innerHTML = response
    }

    function updateDescription(index)
    {
        nodeSelect = document.getElementById("courseMappings[" + index + "].NodeId");
        
        nodeDescription = document.getElementById("Node_Description_" + index);

        if(nodeSelect.options[nodeSelect.selectedIndex].value == "-1")
        {
            nodeDescription.innerHTML = "Please select a Competency from the dropdown menu. For a more detailed descriptions of all the competencies <b class=\"cursor-pointer\" onclick=\"openCompList()\"> Click Here</b>.";
        }
        else
        {
            $.ajax({
                type: "POST",
                url: "AddCourse?handler=GetNodeDescription",
                beforeSend: function (xhr) {
                    xhr.setRequestHeader("XSRF-TOKEN",
                        $('input:hidden[name="__RequestVerificationToken"]').val());
                },
                data: JSON.stringify({
                    num: nodeSelect.options[nodeSelect.selectedIndex].value
                }),
                contentType: "application/json; charset=utf-8",
                dataType: "text",
                success: function(response){
                        insertNodeResponse(response, index);
                }                
            });
        }
    
    }

    function openCompList()
    {
         window.open("/View/Competencies?frameworkId=" + @Model.frameworkId).focus();
    }

    function removeSelected()
    {
        for(let i = 0; i < numOfCourseMappings; i++ )
        {
            if(document.getElementById("Mapping_Selected_" + i) !=null)
            {
                if(document.getElementById("Mapping_Selected_" + i).checked)
                {
                     document.getElementById("CourseMapping_Num_" + i).innerHTML = "<input type=\"hidden\" name=\"courseMappings[" + i + "].NodeId\" id=\"courseMappings[" + i + "].NodeId\" value=\"-2\">";
                }
    
            }
        }
    
    }


    //---------------------------------------------------------------------------
    // *                           removeSelectedAssessments
    // ?  This function removes all the assessments that are selected, it won't
    // ?  remove assessments that have examples added to them and will also redindex assessmnets
    // ?  for example if we have ids 1,2,3 and 2 is removed it will change the remaining
    // ?  to be 1, 2 so it can be posted to a list.
    //---------------------------------------------------------------------------
    function removeSelectedAssessments()
    {
        let assessmentsToRemove = [];

        document.getElementById("AssessmentRemoveError").className = "hidden";

        // remove assessments
        for(let i = 0; i < assesmentCount; i++ )
        {
            if(document.getElementById("Assessment_Selected_" + i) !=null)
            {
                if(document.getElementById("Assessment_Selected_" + i).checked)
                {
                    let canRemove = true
                    for (let j = 0; j < assessmentExampleCount; j++)
                    {
                        if(document.getElementById("documents[" + j + "].AssessmentId").value == i) // if doc linked to assessment
                        {
                            canRemove = false; // don't remove
                            document.getElementById("AssessmentRemoveError").className = "text-red-500 font-bold";
                        }
                    }

                    if(canRemove)
                    {
                        document.getElementById("Assessment_Num_" + i).outerHTML = "";
                        assessmentsToRemove.push(i);
                    }

                }
    
            }
        }

        // redo indexing
        let index = 0;
        for(let i = 0; i < assesmentCount; i++)
        {
            
            let removed = false;
            for(let j = 0; j < assessmentsToRemove.length; j++)
            {  
                if(assessmentsToRemove[j] == i)
                {
                    removed = true;
                }
            }

            // if was not removed change index
            if(!removed)
            {
                //change name
                $(document.getElementById("Assessment_Selected_" + i)).prop("name", "Assessment_Selected_" + index);
                $(document.getElementById("assessmentModels[" + i + "].Name")).prop("name", "assessmentModels[" + index + "].Name")
                $(document.getElementById("assessmentModels[" + i + "].Weight")).prop("name", "assessmentModels[" + index + "].Weight")
                $(document.getElementById("assessmentModels[" + i + "].AssessmentTypeId")).prop("name", "assessmentModels[" + index + "].AssessmentTypeId")
                $(document.getElementById("assessmentModels[" + i + "].Position")).prop("name", "assessmentModels[" + index + "].Position")
                $(document.getElementById("assessmentModels[" + i +"].Purpose")).prop("name", "assessmentModels[" + index +"].Purpose")
                $(document.getElementById("assessmentModels[" + i +"].Description")).prop("name", "assessmentModels[" + index +"].Description")

                //change value
                $(document.getElementById("assessmentModels[" + i + "].Position")).prop("value", "index")
                $(document.getElementById("Assessmnet_Num_Header_" + i)).html((index + 1) + ".")

                //change onclick
                document.getElementById("addAssessmentExampleButton-" + i).setAttribute("onclick", "addAssessmentExample(" + index + ", '', '', -1, '')" )

                //change for 
                $(document.getElementById("assessmentModels_Name_Label_" + i)).prop("for","assessmentModels[" + index + "].Name")
                $(document.getElementById("assessmentModels_Weight_Label_" + i)).prop("for", "assessmentModels[" + index + "].Weight")
                $(document.getElementById("assessmentModels_Purpose_Label_" + i)).prop("for", "assessmentModels[" + index + "].Purpose")
                $(document.getElementById("assessmentModels_Description_Label_" + i)).prop("for", "assessmentModels[" + index + "].Description")

                // change ids
                $(document.getElementById("Assessment_Num_" + i)).prop("id", "Assessment_Num_" + index);
                $(document.getElementById("Assessment_Selected_" + i)).prop("id", "Assessment_Selected_" + index);
                $(document.getElementById("assessmentModels[" + i + "].Name")).prop("id", "assessmentModels[" + index + "].Name")
                $(document.getElementById("assessmentModels[" + i + "].Weight")).prop("id", "assessmentModels[" + index + "].Weight")
                $(document.getElementById("assessmentModels[" + i + "].AssessmentTypeId")).prop("id", "assessmentModels[" + index + "].AssessmentTypeId")
                $(document.getElementById("assessmentModels[" + i + "].Position")).prop("id", "assessmentModels[" + index + "].Position")
                $(document.getElementById("addAssessmentExampleButton-" + i)).prop("id","addAssessmentExampleButton-" + index)
                $(document.getElementById("Assessmnet_Num_Header_" + i)).prop("id", "Assessmnet_Num_Header_" + index)
                $(document.getElementById("assessmentModels[" + i +"].Purpose")).prop("id", "assessmentModels[" + index +"].Purpose")
                $(document.getElementById("assessmentModels[" + i +"].Description")).prop("id", "assessmentModels[" + index +"].Description")
                $(document.getElementById("assessmentModels_Name_Label_" + i)).prop("id", "assessmentModels_Name_Label_" + index)
                $(document.getElementById("assessmentModels_Weight_Label_" + i)).prop("id", "assessmentModels_Weight_Label_" + index)
                $(document.getElementById("assessmentModels_Purpose_Label_" + i)).prop("id", "assessmentModels_Purpose_Label_" + index)
                $(document.getElementById("assessmentModels_Description_Label_" + i)).prop("id", "assessmentModels_Description_Label_" + index)
                //re index examples

                for (let j = 0; j < assessmentExampleCount; j++) // for each assessment example
                {
                    if(document.getElementById("documents["+ j +"].AssessmentId").value == i) // if linked to current assessment being reindexed
                    {
                        document.getElementById("documents[" + j + "].AssessmentId").value = index;
                    }
                }
                index++;
            }
        }
        
        


        
        //decrement assessmentCount
        assesmentCount = index;
    }
    //============================= END OF removeSelectedAssessments ==============================
    //---------------------------------------------------------------------------
    // *                           removeSelectedLearningOutcomes
    // ?  This function removes all the learningoutcomes that are selected.
    // ?  It will also reindex the remaining outcomes
    //---------------------------------------------------------------------------
    function removeSelectedLearningOutcomes() 
    {
        let learingOutcomesToRemove = []

        // remove selected learing outcomes
        for (let i = 0; i < learningOutcomeCount; i++) {
            if (document.getElementById("LearningOutcome_Selected_" + i) != null) {
                if (document.getElementById("LearningOutcome_Selected_" + i).checked) {
                    document.getElementById("LearningOutcome_Num_" + i).outerHTML = "";
                    learingOutcomesToRemove.push(i);
                }

            }
        }

          //redo indexing
        let index = 0;

        for (let i = 0; i < learningOutcomeCount; i++)
        {
            let removed = false
            for(let j = 0; j < learingOutcomesToRemove.length; j++)
            {
                if (learingOutcomesToRemove[j] == i) 
                {
                    removed = true
                }
            }

            //if not removed
            if(!removed)
            {
                //change names
                $(document.getElementById("learningOutcomeModels["+ i + "].Name")).prop("name", "learningOutcomeModels["+ index + "].Name")
                $(document.getElementById("learningOutcomeModels["+ i + "].Position")).prop("name", "learningOutcomeModels["+ index + "].Position")

                //change values
                $(document.getElementById("learningOutcomeModels["+ i + "].Position")).prop("value", index + 1)


                $(document.getElementById("learningOutcome_Num_Display_" + i)).html((index + 1 + "."))

                //change ids
                $(document.getElementById("LearningOutcome_Num_" + i)).prop("id", "LearningOutcome_Num_" + index )
                $(document.getElementById("LearningOutcome_Selected_" + i)).prop("id", "LearningOutcome_Selected_" + index )
                $(document.getElementById("learningOutcomeModels["+ i + "].Name")).prop("id", "learningOutcomeModels["+ index + "].Name")
                $(document.getElementById("learningOutcomeModels["+ i + "].Position")).prop("id", "learningOutcomeModels["+ index + "].Position")
                $(document.getElementById("learningOutcome_Num_Display_" + i)).prop("id", "learningOutcome_Num_Display_" + index)

                index++;

            }
        }

        learningOutcomeCount = index;
      
    }
    //============================= END OF removeSelectedLearningOutcomes ==============================

    function getFieldOfEdu()
    {
        $.ajax({
            type: "POST",
            url: "AddCourse?handler=GetFieldOfEdu",
            beforeSend: function (xhr) {
                xhr.setRequestHeader("XSRF-TOKEN", 
                $('input:hidden[name="__RequestVerificationToken"]').val());
            },
            dataType: "json",
            success: function(response) {
                if(document.getElementById("CourseModel_FieldOfEducationId").length == 1)
                {
                    let fieldOfEduList = new Map();

                    for(let i = 0; i < response.length; i++)
                    {
                        if(!fieldOfEduList.has(response[i].name))
                        {
                            fieldOfEduList.set(response[i].name, response[i].id);
                        }
                    }

                    fieldOfEduList.forEach(function (value, key) {
                        var option = document.createElement("option");
                        option.text = key;
                        option.value = value;
                        document.getElementById("CourseModel_FieldOfEducationId").add(option);

                    });

                }
            }
        });
    }

    function getAcademicOrg()
    {
        $.ajax({
            type: "POST",
            url: "AddCourse?handler=GetAcademicOrg",
            beforeSend: function (xhr) {
                xhr.setRequestHeader("XSRF-TOKEN", 
                $('input:hidden[name="__RequestVerificationToken"]').val());
            },
            dataType: "json",
            success: function(response) {

                if(document.getElementById("CourseModel_AcademicOrgId").length == 1)
                {
                    let academicList = new Map();

                    for(let i = 0; i < response.length; i++)
                    {   
                        if(!academicList.has(response[i].name))
                        {
                            academicList.set(response[i].name, response[i].id);
                        }
                        
                    }

                    academicList.forEach(function (value, key) {
                        var option = document.createElement("option");
                        option.text = key;
                        option.value = value;
                        document.getElementById("CourseModel_AcademicOrgId").add(option);

                    });

                }


            }
            
        });

    }
    //---------------------------------------------------------------------------
    // *                           addAssessment
    // ?  This function inserts part of the form needed to add a new assessment,
    // ?  this is done via JQuerry DOM. assessmentCount is also incremented
    //---------------------------------------------------------------------------
    function addAssessment(name, weight, type, purpose, description )
    {
        if(type == -1)
        {
            @if(@Model.AssessmentTypeModels != null)
            {
                @if(@Model.AssessmentTypeModels.Count > 1)
                {
                    @Html.Raw("type = " + @Model.AssessmentTypeModels[1].AssessmentTypeId);
                }
                else if(@Model.AssessmentTypeModels.Count > 0)
                {
                    @Html.Raw("type = " + @Model.AssessmentTypeModels[0].AssessmentTypeId);
                }
            }
        }


        //create div to be inserted
        var assessment = $("<div>", {"id": "Assessment_Num_" + assesmentCount, "class": "flex flex-row border-collapse"}).append(
            $("<div>" , {"class": "col-span-1 p-2 border basis-16 relative"}).append(
                $("<div>", {"class": "grid grid-cols-2 place-self-center"}).append(
                    $("<input>" , { "type": "checkbox", "id": "Assessment_Selected_" + assesmentCount, "name" : "Assessment_Selected_" + assesmentCount }),
                    $("<h3>", {"class": "pl-2", "id": "Assessmnet_Num_Header_" + assesmentCount}).append(assesmentCount+1 + ".")
                ),
            ),

            $("<div>", {"id": "Assessment_Num_FormData_" + assesmentCount, "class": "grid grid-cols-8 basis-full"}).append(
                $("<div>" ,{"class": "col-span-4 h-12"}).append(
                    $("<div>", {"class" : "border align-middle w-full h-full relative"}).append(
                        $("<input>", {"value" : name ,"type" : "text", "id": "assessmentModels[" + assesmentCount +"].Name", "name" : "assessmentModels[" + assesmentCount +"].Name",  "class" : "peer w-full h-full placeholder-transparent", "placeholder" : "Name"}),
                        $("<label>", {"id": "assessmentModels_Name_Label_" + assesmentCount, "for": "assessmentModels[" + assesmentCount +"].Name", "class": "absolute w-full h-full transition-all text-gray-500 text-xs -top-0.5 left-0 peer-placeholder-shown:text-base peer-placeholder-shown:pt-2 peer-placeholder-shown:pl-1 peer-placeholder-shown:left-0 peer-placeholder-shown:inset-y-0"}).append("Assessment Name")
                    )             
                ),
                $("<div>", {"class" : "border align-middle relative"}).append(
                    $("<input>", {"value" : weight ,"type" : "text", "name" : "assessmentModels[" + assesmentCount + "].Weight", "id" : "assessmentModels[" + assesmentCount + "].Weight", "class" : "peer placeholder-transparent w-full h-full", "placeholder" : "Weight"}),
                    $("<label>", {"id": "assessmentModels_Weight_Label_" + assesmentCount, "for": "assessmentModels[" + assesmentCount +"].Weight", "class": "absolute w-full h-full transition-all text-gray-500 text-xs -top-0.5 left-0 peer-placeholder-shown:text-base peer-placeholder-shown:pt-2 peer-placeholder-shown:pl-1 peer-placeholder-shown:left-0 peer-placeholder-shown:inset-y-0"}).append("Weight")
                ),
                $("<div>" , {"class" : "col-span-2 border align-middle"}).append(
                    $("<select>", { "name": "assessmentModels[" + assesmentCount +"].AssessmentTypeId", "id" : "assessmentModels[" + assesmentCount +"].AssessmentTypeId", "class" : "w-full h-full"}).append(
                        $("<optgroup>", {"label": "Assessment Type"}),
                        @if(@Model.AssessmentTypeModels != null)
                        {
                            @for (int i = 1; i < @Model.AssessmentTypeModels.Count; i++)
                            {
                                @Html.Raw("$(\"<option>\", {\"value\" : \"" + @Model.AssessmentTypeModels[i].AssessmentTypeId + "\"}).append(\"" + @Model.AssessmentTypeModels[i].Name + "\"), \n");
                            }
                            @if(Model.AssessmentTypeModels.Count >= 0)
                            {
                                @Html.Raw("$(\"<option>\", {\"value\" : \"" + @Model.AssessmentTypeModels[0].AssessmentTypeId + "\"}).append(\"" + @Model.AssessmentTypeModels[0].Name + "\") \n");
                            }

                            

                        }   
                    )
                ),
                $("<div>" , {"class" : "border align-middle"}).append(
                    $("<button>", {"class" : "w-full h-full", "type" : "button", "onclick" : "addAssessmentExample(" + assesmentCount + ", '', '', -1, '')", "id" : "addAssessmentExampleButton-" + assesmentCount}).append("Add Example")
                ),
                $("<input>", {"type" : "hidden", "value" : assesmentCount, "name" : "assessmentModels["+ assesmentCount +"].Position", "id" : "assessmentModels["+ assesmentCount +"].Position"})
            ).append(
                $("<div>", {"class" : "col-span-8 w-full h-24"}).append(
                    $("<div>", {"class" : "h-1/2 w-full relative"}).append(
                        $("<input>", {"value" : purpose, "id": "assessmentModels[" + assesmentCount +"].Purpose" , "name": "assessmentModels[" + assesmentCount +"].Purpose", "class" : "peer h-full w-full border placeholder-transparent", "placeholder": "Purpose"}),
                        $("<label>", {"id": "assessmentModels_Purpose_Label_" + assesmentCount, "for": "assessmentModels[" + assesmentCount +"].Purpose", "class": "absolute w-full h-full transition-all text-gray-500 text-xs -top-0.5 left-0 peer-placeholder-shown:text-base peer-placeholder-shown:pt-2 peer-placeholder-shown:pl-1 peer-placeholder-shown:left-0 peer-placeholder-shown:inset-y-0"}).append("Purpose")
                    ),
                    $("<div>", {"class" : "h-1/2 w-full relative"}).append(
                        $("<input>", {"value" : description, "id": "assessmentModels[" + assesmentCount +"].Description", "name" : "assessmentModels[" + assesmentCount +"].Description", "class" : "peer h-full w-full border placeholder-transparent", "placeholder" : "Description"}),
                        $("<label>", {"id": "assessmentModels_Description_Label_" + assesmentCount, "for": "assessmentModels[" + assesmentCount +"].Description", "class": "absolute w-full h-full transition-all text-gray-500 text-xs -top-0.5 left-0 peer-placeholder-shown:text-base peer-placeholder-shown:pt-2 peer-placeholder-shown:pl-1 peer-placeholder-shown:left-0 peer-placeholder-shown:inset-y-0"}).append("Description")
                    )
                )

            )
        )
        assessment.find('select').val(type)
        // insert html
        $("#Assessments").append(assessment)
                                      
        assesmentCount++;
    }
    //============================= END OF addAssessment ==============================

    //---------------------------------------------------------------------------
    // *                           addLearningOutcome
    // ?  This function inserts part of the form needed to add a new learning outcome,
    // ?  this is done via JQuerry DOM. learningOutcomeCount is also incremented.
    //---------------------------------------------------------------------------
    function addLearningOutcome(name)
    {
        var learningOutcome = $("<div>", {"class" : "grid grid-cols-10", "id" : "LearningOutcome_Num_" + learningOutcomeCount}).append(
            $("<div>", {"class" : "col-span-1 p-2 border-r border-l border-b grid grid-cols-2"}).append(
                $("<input>", {"type" : "checkbox", "id" : "LearningOutcome_Selected_" + learningOutcomeCount}),
                $("<h3>", {"id" : "learningOutcome_Num_Display_" + learningOutcomeCount}).append((learningOutcomeCount+1) + ".")
            ),
            
            $("<div>", {"class" : "col-span-9 border-b border-r align-middle w-full h-full"}).append(
                $("<input>", {"value": name,  "type" : "text", "name" : "learningOutcomeModels["+ learningOutcomeCount + "].Name", "id": "learningOutcomeModels["+ learningOutcomeCount + "].Name", "class" : "w-full h-full"})
            ),

            $("<input>", {"type" : "hidden", "value" : learningOutcomeCount+1, "name" : "learningOutcomeModels["+ learningOutcomeCount +"].Position", "id": "learningOutcomeModels["+ learningOutcomeCount +"].Position"})
        )

        $("#LearningOutcomes").append(learningOutcome)
 
        learningOutcomeCount++;
    }
    //============================= END OF addLearningOutcome ==============================
    function addMapping()
    {
            $.ajax({
                type: "POST",
                url: "AddCourse?handler=AddMapping",
                beforeSend: function (xhr) {
                    xhr.setRequestHeader("XSRF-TOKEN",
                        $('input:hidden[name="__RequestVerificationToken"]').val());
                },
                data: JSON.stringify({
                        num: numOfCourseMappings,
                        projectId: @Model.projectId
                    }),
                contentType: "application/json; charset=utf-8",
                dataType: "html",
                success: function(response){
                        insertResponse(response, "Mapping");
                }
        });
        IncrementCourseMappings();
    }

    function getMapping()
    {
            $.ajax({
                type: "POST",
                url: "AddCourse?handler=LoadMapping",
                beforeSend: function (xhr) {
                    xhr.setRequestHeader("XSRF-TOKEN",
                        $('input:hidden[name="__RequestVerificationToken"]').val());
                },
                data: JSON.stringify({
                    loadCourse: "@Model.loadCourse",
                    courseId: @Model.loadedCourseId
                }),
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                success: function(response){
                        loadMapping(response);
                }
        });
    }

    function loadMapping(response)
    {
        
        var nodeArr = []
        for(let i = 0; i < response.length; i++)
        {
            var addNode = true;
            for(let j = 0; j < nodeArr.length; j++)
            {
                if(nodeArr[j] == response[i].nodeId)
                {
                    addNode = false;
                }
            }

            if (addNode)
            {
                nodeArr.push(response[i].nodeId)
            }


        }
        
        for(let i = 0; i < nodeArr.length; i++)
        {
            addMapping()            
        }

        setTimeout(function(){  fillMapping(response, nodeArr) }, 125 * response.length) 
    }

    function fillMapping(response, nodeArr)
    {
        for(let i = 0; i < nodeArr.length; i++)
        {
            document.getElementById("node-"+ i + "-" + nodeArr[i]).selected = "true";

        }

        for(let i = 0; i < response.length; i++)
        {
            let index = 0
            for(let j = 0; j < nodeArr.length; j ++)
            {
                if(nodeArr[j] == response[i].nodeId)
                {
                    index = j;
                }
            }


            if(response[i].levelCatName == "Implied Pedagogy")
            {

                if(response[i].levelName == "Taught")
                {
                    toggleTaught(index)
                }                
                else if(response[i].levelName == "Practiced")
                {
                    togglePracticed(index)
                }                
                else if(response[i].levelName == "Assessed")
                {
                    toggleAssessed(index)
                }
            }
            else if(response[i].levelCatName == "Level of Capability")
            {
                if(response[i].levelName == "Introduction to a topic at a University level")
                {
                    document.getElementById("courseMappings[" + index +"].Level").value = 1
                }                
                else if(response[i].levelName == "Progressive reinforcements of a topic at a University level")
                {
                    document.getElementById("courseMappings[" + index +"].Level").value = 2
                }                
                else if(response[i].levelName == "Progressive and advanced reinforcements of a topic at a University level")
                {
                    document.getElementById("courseMappings[" + index +"].Level").value = 3
                }                
                else if(response[i].levelName == "Reinforcement of skills commensurate with an Honours graduate and entry to professional practice")
                {
                    document.getElementById("courseMappings[" + index +"].Level").value = 4
                }

                
            }
        }
    }

    //---------------------------------------------------------------------------
    // *                           addAssessmentExample
    // ?  This function inserts the form elements needed to add a document example 
    // ?  into the form. It populates a <List<documents>> where the first list
    // ?  index matches the assessment.
    // param assessmentNumber int
    //---------------------------------------------------------------------------
    function addAssessmentExample(assessmentNumber, uri, name, type, grade)
    {

        

        var example = document.createElement("div");
        example.className = "grid col-span-8 grid-cols-10 w-full h-full";

        example.id = "assessment-example-" + assessmentExampleCount

        var innerHTML = "   <input value=\"" + uri + "\" id=\"documents["+ assessmentExampleCount +"].URI\" name=\"documents["+ assessmentExampleCount +"].URI\" class=\"border-l border-b col-span-4\" type=\"text\" placeholder=\"URL\" /> \n";
        innerHTML += "       <input value=\"" + name + "\" id=\"documents["+ assessmentExampleCount +"].Name\" name=\"documents["+ assessmentExampleCount +"].Name\" class=\"border-l border-b col-span-3\" type=\"text\" placeholder=\"Name\"/> \n";        
        innerHTML += "       <select id=\"documents["+ assessmentExampleCount +"].Type\" name=\"documents["+ assessmentExampleCount +"].Type\" class=\"col-span-2\"> \n";       
        innerHTML += "           <option value=\"-1\" disabled selected>Select Example Type</option> \n";        
        innerHTML += "           <option value=\"WorkSample\">Work Sample</option> \n";        
        innerHTML += "           <option value=\"AssessmentItem\">Assessment Item</option> \n";        
        innerHTML += "           <option value=\"MarkingRubric\">Marking Rubric</option> \n";                
        innerHTML += "       </select> \n";
        innerHTML += "      <div class=\"grid grid-cols-2 w-full h-full\">";
        innerHTML += "          <select id=\"documents["+ assessmentExampleCount +"].Grade\" name=\"documents["+ assessmentExampleCount +"].Grade\" class=\"\"> \n";
        innerHTML += "              <option value=\"\">N/A</option> \n";      
        innerHTML += "              <option value=\"HD\">HD</option> \n";        
        innerHTML += "              <option value=\"D\">D</option> \n";        
        innerHTML += "              <option value=\"C\">C</option> \n";
        innerHTML += "              <option value=\"P\">P</option> \n";       
        innerHTML += "              <option value=\"FF\">FF</option> \n";        
        innerHTML += "          </select> \n";
        innerHTML += "          <button type=\"button\" class=\"w-full grid place-items-center border-r border-b cursor-pointer\" id=\"removeAssessmentExampleButton-"+assessmentExampleCount+"\" onclick=\"removeAssessmentExample(" + assessmentExampleCount +")\"> \n" 
        innerHTML += "              <img src=\"/img/SVG/x-circle.svg\"/> \n" 
        innerHTML += "          </button> \n"     
        innerHTML += "      </div>";
        innerHTML += "  <input type=\"hidden\" id=\"documents["+ assessmentExampleCount +"].AssessmentId\" name=\"documents["+ assessmentExampleCount +"].AssessmentId\" value=\""+ assessmentNumber +"\"/>"
            
        example.innerHTML = innerHTML;

        $($(example).find('select')[0]).val(type)
        $($(example).find('select')[1]).val(grade)

        
        var assessmentDoc = document.getElementById("Assessment_Num_FormData_" + assessmentNumber);

        assessmentDoc.insertAdjacentElement("beforeend", example);

         assessmentExampleCount++;
    }
    //============================= END OF addAssessmentExample ==============================

    //---------------------------------------------------------------------------
    // *                           removeAssessmentExample
    // ?  This function removes an assessment example and then re-indexs the remaining examples.
    // param assessmentExampleNumber int
    //---------------------------------------------------------------------------
    function removeAssessmentExample(assessmentExampleNumber)
    {
        document.getElementById("assessment-example-" + assessmentExampleNumber).outerHTML = ""; // remove example

        
        // re index
        for(let i = assessmentExampleNumber + 1; i < assessmentExampleCount; i++) // for all examples with index above the removed index
        {
            //change name
            $(document.getElementById("documents["+ (i) + "].URI")).prop("name", "documents["+ (i-1) + "].URI")
            $(document.getElementById("documents["+ (i) + "].Name")).prop("name", "documents["+ (i-1) + "].Name")
            $(document.getElementById("documents["+ (i) + "].Type")).prop("name", "documents["+ (i-1) + "].Type")
            $(document.getElementById("documents["+ (i) + "].Grade")).prop("name", "documents["+ (i-1) + "].Grade")
            $(document.getElementById("documents["+ (i) + "].AssessmentId")).prop("name", "documents["+ (i-1) + "].AssessmentId")    

            //change onclicks
            document.getElementById("removeAssessmentExampleButton-" + i).setAttribute("onclick", "removeAssessmentExample(" + (i-1) +")")

            //change ids
            $(document.getElementById("assessment-example-" + i)).prop("id", "assessment-example-" + (i-1))
            $(document.getElementById("documents["+ (i) + "].URI")).prop("id", "documents["+ (i-1) + "].URI")
            $(document.getElementById("documents["+ (i) + "].Name")).prop("id", "documents["+ (i-1) + "].Name")
            $(document.getElementById("documents["+ (i) + "].Type")).prop("id", "documents["+ (i-1) + "].Type")
            $(document.getElementById("documents["+ (i) + "].Grade")).prop("id", "documents["+ (i-1) + "].Grade")
            $(document.getElementById("documents["+ (i) + "].AssessmentId")).prop("id", "documents["+ (i-1) + "].AssessmentId")    
            $(document.getElementById("removeAssessmentExampleButton-" + i)).prop("id", "removeAssessmentExampleButton-" + (i-1))
            

        }

        assessmentExampleCount--;

    }

    $(document).ready(function(){
        getMapping()
        getFieldOfEdu()
        getAcademicOrg()

        @if(Model.loadCourse)
        {
            @if(Model.CourseModel.CourseInstances != null)
            {
                @for(int i = 0; i < Model.CourseModel.CourseInstances[0].Assessments.Count; i++)
                {
                    @Html.Raw("addAssessment(\"" +  Model.CourseModel.CourseInstances[0].Assessments[i].Name + "\" ,\"" + Model.CourseModel.CourseInstances[0].Assessments[i].Weight + "\" ,\""+ Model.CourseModel.CourseInstances[0].Assessments[i].AssessmentType.AssessmentTypeId + "\" ,\"" + Model.CourseModel.CourseInstances[0].Assessments[i].Purpose + "\" ,\"" + Model.CourseModel.CourseInstances[0].Assessments[i].Description + "\") \n");

                    @for(int j = 0; j < Model.CourseModel.CourseInstances[0].Assessments[i].Documents.Count; j++)
                    {
                        @Html.Raw("addAssessmentExample(" + i +", \"" + Model.CourseModel.CourseInstances[0].Assessments[i].Documents[j].URI + "\", \"" + Model.CourseModel.CourseInstances[0].Assessments[i].Documents[j].Name + "\", \"" + Model.CourseModel.CourseInstances[0].Assessments[i].Documents[j].Type + "\", \"" + Model.CourseModel.CourseInstances[0].Assessments[i].Documents[j].Grade + "\") \n")
                    }

                }

                @for(int i = 0; i < Model.CourseModel.CourseInstances[0].LearningOutcomes.Count; i++)
                {
                    @Html.Raw("addLearningOutcome(\"" + Model.CourseModel.CourseInstances[0].LearningOutcomes[i].Name +"\") \n")
                }

            }
        }



    });

</script>

<section class="py-4">
 <form method="POST" enctype="multipart/form-data" asp-page-handler="submit" name="AddCourseForm">

<input type="hidden" asp-for="programId" value="@Model.programId">
<input type="hidden" asp-for="Year" value="@Model.Year">
<input type="hidden" asp-for="Semester" value="@Model.Semester">
<input type="hidden" asp-for="Pos" value="@Model.Pos">
<input type="hidden" asp-for="projectId" value="@Model.projectId">
<input type="hidden" asp-for="CourseListJson" value="@Model.CourseListJson">
<input type="hidden" asp-for="LevelCategoryJson" value="@Model.LevelCategoryJson">
<input type="hidden" asp-for="loadCourse" value="@Model.loadCourse">
<input type="hidden" asp-for="loadedCourseId" value="@Model.loadedCourseId">

    <div class="bg-white overflow-hidden shadow rounded-lg">
        <div class="border-b border-gray-200 px-4 py-5 sm:px-6">

            <br>        

            <div class="grid grid-cols-2 gap-x-6 gap-y-2">
                
                    <label>Course Name: </label>
                    <label>Course Code: </label>
                    
                    <input type="text" asp-for="CourseModel.Name" class="rounded-lg border-solid border-2 border-black-500 focus:border-blue-300"> 
                    <input type="text" asp-for="CourseCode" class="rounded-lg border-solid border-2 border-black-500 focus:border-blue-300"> 

            </div>

            <div class="grid grid-cols-1">
                <label> Description: </label>
                <textarea type="text" asp-for="CourseModel.Description" class="rounded-lg border-solid border-2 border-black-500 focus:border-blue-300 col-span-full h-56"></textarea>
            </div>

            <div class="grid grid-cols-2 gap-x-6 gap-y-2">
                <label>Units: </label>
                <label>Academic Org: </label>
                <input type="text" asp-for="CourseModel.Units" class="rounded-lg border-solid border-2 border-black-500 focus:border-blue-300">
                <select asp-for="CourseModel.AcademicOrgId" class="" onclick="getAcademicOrg()">
                    @if(Model.loadCourse)
                    {
                        <option value="@Model.CourseModel.AcademicOrg.AcademicOrgId">@Model.CourseModel.AcademicOrg.Name</option>
                    }
                    else
                    {
                        <option value="">Academic Org</option>
                    }
                    



                </select>

                <label class="col-span-full">Field Of Education: </label>
                @* <input type="text" asp-for="CourseModel.FieldOfEducation" class="rounded-lg border-solid border-2 border-black-500 focus:border-blue-300"> *@
                <select asp-for="CourseModel.FieldOfEducationId" class="" onclick="getFieldOfEdu()">
                    @if(Model.loadCourse)
                    {
                        <option value="@Model.CourseModel.FieldOfEducation.FieldOfEducationId">@Model.CourseModel.FieldOfEducation.Name</option>
                    }
                    else
                    {
                        <option value="">Field Of Education</option>
                    }

                </select>
            </div>
        </div>
    </div>
    <br>
    <div class="bg-white overflow-hidden shadow rounded-lg">
        <div class="border-b border-gray-200 px-4 py-5 sm:px-6 grid grid-cols-10 gap-x-24 gap-y-2">
            <h2 class="justify-start col-span-6" id="Mapping_Header"> Mapping </h2>
            <b class="hidden" id="InvalidMapping">Invalid Course Mapping: Courses must have Taught, Practiced or Assessed asgined to them.</b>

            <div class="col-span-4 grid grid-cols-10 gap-x-6">
                
                <h2 id="CourseMapping" class="justify-end cursor-pointer border border-gray-400 hover:border-sky-700 uppercase rounded-lg px-3 bg-gray-200 align-middle col-span-4 text-center" onclick="addMapping()">Add Mapping</h2>
                <h2 id="RemoveCourseMapping" class="cursor-pointer border border-gray-400 hover:border-sky-700 uppercase rounded-lg px-3 bg-gray-200 align-middle col-span-6 text-center" onclick="removeSelected()">Remove Selected Mapping</h2>

            </div>

        </div>

        <div class="px-4 py-5 sm:p-6" id="Mapping">
            <div class="grid grid-cols-10 w-90 h-12 border-b border-gray-200 bg-gray-50">
                <h2 class="px-6 py-3 text-left text-xs leading-4 font-medium text-gray-500 uppercase tracking-wider col-span-6 bg-gray-50 align-middle">Element of Competency</h2>
                <h2 class="px-6 py-3 text-centre text-xs leading-4 font-medium text-gray-500 uppercase tracking-wider bg-gray-50 align-middle">Taught</h2>
                <h2 class="px-6 py-3 text-centre text-xs leading-4 font-medium text-gray-500 uppercase tracking-wider bg-gray-50 align-middle">Practiced</h2>
                <h2 class="px-6 py-3 text-centre text-xs leading-4 font-medium text-gray-500 uppercase tracking-wider bg-gray-50 align-middle">Assessed</h2>
                <h2 class="px-6 py-3 text-centre text-xs leading-4 font-medium text-gray-500 uppercase tracking-wider bg-gray-50 align-middle">Level</h2>
            </div>
        </div>
    </div>
     <br>
    <div class="bg-white overflow-hidden shadow rounded-lg">
        <div class="border-b border-gray-200 px-4 py-3 sm:px-6">
            <h2 class="justify-start"> Instance </h2>
        </div>

        <div class="border-b border-gray-200 px-4 py-3 sm:px-6">
            


            <div class="grid grid-cols-2">
                <h3>Assessments</h3>
                <div class="grid grid-cols-10 gap-x-4">
                    <h3 class="justify-end cursor-pointer border border-gray-400 hover:border-sky-700 uppercase rounded-lg px-3 bg-gray-200 align-middle text-center col-span-4" onclick="addAssessment('', '', -1, '', '')">Add Assesment</h3>
                    <h3 class="justify-end cursor-pointer border border-gray-400 hover:border-sky-700 uppercase rounded-lg px-3 bg-gray-200 align-middle text-center col-span-6" onclick="removeSelectedAssessments()">Remove Selected Assesments</h3>
                </div>
            </div>

        </div>

        <div class="hidden" id="AssessmentRemoveError">
            <p>Not all assessments could be removed, please remove documents attached first.</p>
        </div>

        <div class="border-b border-gray-200 px-4 py-3 sm:px-6">

            <div id="Assessments">

            </div>

        </div>

        <div class="border-b border-gray-200 px-4 py-3 sm:px-6">
            
            <br>

            <div class="grid grid-cols-3">
                <h3>Learning Outcomes</h3>
                <div class="grid grid-cols-10 gap-x-4 col-span-2">
                    <h3 class="justify-end cursor-pointer border border-gray-400 hover:border-sky-700 uppercase rounded-lg px-3 bg-gray-200 align-middle text-center col-span-4" onclick="addLearningOutcome('')">Add Learning Outcomes</h3>
                    <h3 class="justify-end cursor-pointer border border-gray-400 hover:border-sky-700 uppercase rounded-lg px-3 bg-gray-200 align-middle text-center col-span-6" onclick="removeSelectedLearningOutcomes()">Remove Selected Learning Outcomes</h3>
                </div>
            </div>

        </div>

        <div class="border-b border-gray-200 px-4 py-3 sm:px-6">

            <div id="LearningOutcomes">
                <div class="grid grid-cols-1 w-90 h-12 border-b border-gray-200 bg-gray-50">
                    <h3 class="px-6 py-3 text-left text-xs leading-4 font-medium text-gray-500 uppercase tracking-wider col-span-1 bg-gray-50 align-middle">Learning Outcomes</h3>
                </div>

            </div>
        </div>

    </div>
    <br>

    <div class="bg-white overflow-hidden shadow rounded-lg">
        <div class="border-b border-gray-200 px-4 py-3 sm:px-6 h-12 align-middle">
             <a class="float-right border border-gray-400 hover:border-sky-700 uppercase rounded-lg px-3 bg-gray-200 align-middle text-right cursor-pointer" onclick="formValidation()" >Submit</a>
        </div>
     </div>

    </form>

</section>

